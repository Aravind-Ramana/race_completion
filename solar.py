import numpy as np

from config import PanelArea, PanelEfficiency
from state import RaceStartTime, RaceEndTime

DT = RaceEndTime - RaceStartTime
_power_coeff = PanelArea * PanelEfficiency

def _calc_solar_irradiance(time):
    return 1073.099 * np.exp(-0.5 * ((time - 43200) / 11600)**2)

def calculate_incident_solarpower(globaltime, latitude, longitude):
    # Calculate power generated by solar in the path
    gt = globaltime % DT
    intensity = _calc_solar_irradiance(RaceStartTime + gt)
    return intensity * _power_coeff
# import numpy as np
# from config import PanelArea, PanelEfficiency
# from state import RaceStartTime, RaceEndTime

# # Constants for the Gaussian fit model
# I0 = 1000  # Peak irradiance
# mu = 12  # Mean time of peak irradiance (noon)
# sigma = 3.5  # Standard deviation (width of the peak)

# DT = RaceEndTime - RaceStartTime
# _power_coeff = PanelArea * PanelEfficiency

# def _calc_solar_irradiance(time):
#     # Gaussian fit for solar irradiance
#     return I0 * np.exp(-0.5 * ((time - mu) / sigma) ** 2)

# def calculate_incident_solarpower(globaltime, latitude, longitude):
#     # Calculate power generated by solar in the path
#     gt = globaltime % DT
#     # Adjust time to the appropriate range if necessary
#     local_time = RaceStartTime + gt
#     # Normalize time to a 24-hour scale (assuming RaceStartTime and RaceEndTime are also in this scale)
#     local_time = local_time % 24
#     intensity = _calc_solar_irradiance(local_time)
#     return intensity * _power_coeff
